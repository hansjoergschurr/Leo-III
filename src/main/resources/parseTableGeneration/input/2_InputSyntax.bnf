<TPTP_input>         ::= <annotated_formula> | <include>

<annotated_formula>  ::= <thf_annotated> | <tff_annotated> | <fof_annotated> |
                         <cnf_annotated> | <tpi_annotated>

<tpi_annotated>      ::= tpi ( <name> , <formula_role> , <tpi_formula> <annotations> ) .

<tpi_formula>        ::= <fof_formula>

<thf_annotated>      ::= thf ( <name> , <formula_role> , <thf_formula> <annotations> ) .

<tff_annotated>      ::= tff ( <name> , <formula_role> , <tff_formula> <annotations> ) .

<fof_annotated>      ::= fof ( <name> , <formula_role> , <fof_formula> <annotations> ) .

<cnf_annotated>      ::= cnf ( <name> , <formula_role> , <cnf_formula> <annotations> ) .

<annotations>        ::= , <source> <optional_info> | <null>

<formula_role>       ::= lower_word

<thf_formula>        ::= <thf_logic_formula> | <thf_sequent>

<thf_logic_formula>  ::= <thf_binary_formula> | <thf_unitary_formula> |
                         <thf_type_formula> | <thf_subtype>

<thf_binary_formula> ::= <thf_binary_pair> | <thf_binary_tuple> |
                         <thf_binary_type>

<thf_binary_pair>    ::= <thf_unitary_formula> <thf_pair_connective> <thf_unitary_formula>

<thf_binary_tuple>   ::= <thf_or_formula> | <thf_and_formula> |
                         <thf_apply_formula>

<thf_or_formula>     ::= <thf_unitary_formula> vline <thf_unitary_formula> |
                         <thf_or_formula> vline <thf_unitary_formula>

<thf_and_formula>    ::= <thf_unitary_formula> & <thf_unitary_formula> |
                         <thf_and_formula> & <thf_unitary_formula>

<thf_apply_formula>  ::= <thf_unitary_formula> @ <thf_unitary_formula> |
                         <thf_apply_formula> @ <thf_unitary_formula>

<thf_unitary_formula> ::= <thf_quantified_formula> | <thf_unary_formula> |
                         <thf_atom> | <thf_conditional> | <thf_let> |
                         ( <thf_logic_formula> )

<thf_quantified_formula> ::= <thf_quantifier> [ <thf_variable_list> ] : <thf_unitary_formula>

<thf_variable_list>  ::= <thf_variable> | <thf_variable> , <thf_variable_list>

<thf_variable>       ::= <thf_typed_variable> | <variable>

<thf_typed_variable> ::= <variable> : <thf_top_level_type>

<thf_unary_formula>  ::= <thf_unary_connective> ( <thf_logic_formula> )

<thf_atom>           ::= <term> | <thf_conn_term>

<thf_conditional>    ::= $ite_f ( <thf_logic_formula> , <thf_logic_formula> , <thf_logic_formula> )

<thf_let>            ::= $let_tf ( <thf_let_term_defn> , <thf_formula> ) |
                         $let_ff ( <thf_let_formula_defn> , <thf_formula> )

<thf_let_term_defn>  ::= <thf_quantified_formula>

<thf_let_formula_defn> ::= <thf_quantified_formula>

<thf_type_formula>   ::= <thf_typeable_formula> : <thf_top_level_type>

<thf_typeable_formula> ::= <thf_atom> | ( <thf_logic_formula> )

<thf_subtype>        ::= <constant> <subtype_sign> <constant>

<thf_top_level_type> ::= <thf_logic_formula>

<thf_unitary_type>   ::= <thf_unitary_formula>

<thf_binary_type>    ::= <thf_mapping_type> | <thf_xprod_type> |
                         <thf_union_type>

<thf_mapping_type>   ::= <thf_unitary_type> arrow <thf_unitary_type> |
                         <thf_unitary_type> arrow <thf_mapping_type>

<thf_xprod_type>     ::= <thf_unitary_type> star <thf_unitary_type> |
                         <thf_xprod_type> star <thf_unitary_type>

<thf_union_type>     ::= <thf_unitary_type> plus <thf_unitary_type> |
                         <thf_union_type> plus <thf_unitary_type>

<thf_sequent>        ::= <thf_tuple> <gentzen_arrow> <thf_tuple> |
                         ( <thf_sequent> )

<thf_tuple>          ::= [ ] | [ <thf_tuple_list> ]

<thf_tuple_list>     ::= <thf_logic_formula> |
                         <thf_logic_formula> , <thf_tuple_list>

<tff_formula>        ::= <tff_logic_formula> | <tff_typed_atom> | <tff_sequent>

<tff_logic_formula>  ::= <tff_binary_formula> | <tff_unitary_formula>

<tff_binary_formula> ::= <tff_binary_nonassoc> | <tff_binary_assoc>

<tff_binary_nonassoc> ::= <tff_unitary_formula> <binary_connective> <tff_unitary_formula>

<tff_binary_assoc>   ::= <tff_or_formula> | <tff_and_formula>

<tff_or_formula>     ::= <tff_unitary_formula> vline <tff_unitary_formula> |
                         <tff_or_formula> vline <tff_unitary_formula>

<tff_and_formula>    ::= <tff_unitary_formula> & <tff_unitary_formula> |
                         <tff_and_formula> & <tff_unitary_formula>

<tff_unitary_formula> ::= <tff_quantified_formula> | <tff_unary_formula> |
                         <atomic_formula> | <tff_conditional> | <tff_let> |
                         ( <tff_logic_formula> )

<tff_quantified_formula> ::= <fol_quantifier> [ <tff_variable_list> ] : <tff_unitary_formula>

<tff_variable_list>  ::= <tff_variable> | <tff_variable> , <tff_variable_list>

<tff_variable>       ::= <tff_typed_variable> | <variable>

<tff_typed_variable> ::= <variable> : <tff_atomic_type>

<tff_unary_formula>  ::= <unary_connective> <tff_unitary_formula> |
                         <fol_infix_unary>

<tff_conditional>    ::= $ite_f ( <tff_logic_formula> , <tff_logic_formula> , <tff_logic_formula> )

<tff_let>            ::= $let_tf ( <tff_let_term_defn> , <tff_formula> ) |
                         $let_ff ( <tff_let_formula_defn> , <tff_formula> )

<tff_let_term_defn>  ::= ! [ <tff_variable_list> ] : <tff_let_term_defn> |
                         <tff_let_term_binding>

<tff_let_term_binding> ::= <term> = <term> | ( <tff_let_term_binding> )

<tff_let_formula_defn> ::= ! [ <tff_variable_list> ] : <tff_let_formula_defn> |
                         <tff_let_formula_binding>

<tff_let_formula_binding> ::= <atomic_formula> less_eq_greater <tff_unitary_formula> |
                         ( <tff_let_formula_binding> )

<tff_sequent>        ::= <tff_tuple> <gentzen_arrow> <tff_tuple> |
                         ( <tff_sequent> )

<tff_tuple>          ::= [ ] | [ <tff_tuple_list> ]

<tff_tuple_list>     ::= <tff_logic_formula> |
                         <tff_logic_formula> , <tff_tuple_list>

<tff_typed_atom>     ::= <tff_untyped_atom> : <tff_top_level_type> |
                         ( <tff_typed_atom> )

<tff_untyped_atom>   ::= <functor> | <system_functor>

<tff_top_level_type> ::= <tff_atomic_type> | <tff_mapping_type> |
                         <tff_quantified_type> | ( <tff_top_level_type> )

<tff_quantified_type> ::= ! arrow [ <tff_variable_list> ] : <tff_monotype>

<tff_monotype>       ::= <tff_atomic_type> | ( <tff_mapping_type> )

<tff_unitary_type>   ::= <tff_atomic_type> | ( <tff_xprod_type> )

<tff_atomic_type>    ::= <atomic_word> | <defined_type> |
                         <atomic_word> ( <tff_type_arguments> ) | <variable>

<tff_type_arguments> ::= <tff_atomic_type> |
                         <tff_atomic_type> , <tff_type_arguments>

<tff_mapping_type>   ::= <tff_unitary_type> arrow <tff_atomic_type>

<tff_xprod_type>     ::= <tff_unitary_type> star <tff_atomic_type> |
                         <tff_xprod_type> star <tff_atomic_type>

<fof_formula>        ::= <fof_logic_formula> | <fof_sequent>

<fof_logic_formula>  ::= <fof_binary_formula> | <fof_unitary_formula>

<fof_binary_formula> ::= <fof_binary_nonassoc> | <fof_binary_assoc>

<fof_binary_nonassoc> ::= <fof_unitary_formula> <binary_connective> <fof_unitary_formula>

<fof_binary_assoc>   ::= <fof_or_formula> | <fof_and_formula>

<fof_or_formula>     ::= <fof_unitary_formula> vline <fof_unitary_formula> |
                         <fof_or_formula> vline <fof_unitary_formula>

<fof_and_formula>    ::= <fof_unitary_formula> & <fof_unitary_formula> |
                         <fof_and_formula> & <fof_unitary_formula>

<fof_unitary_formula> ::= <fof_quantified_formula> | <fof_unary_formula> |
                         <atomic_formula> | ( <fof_logic_formula> )

<fof_quantified_formula> ::= <fol_quantifier> [ <fof_variable_list> ] : <fof_unitary_formula>

<fof_variable_list>  ::= <variable> | <variable> , <fof_variable_list>

<fof_unary_formula>  ::= <unary_connective> <fof_unitary_formula> |
                         <fol_infix_unary>

<fof_sequent>        ::= <fof_tuple> <gentzen_arrow> <fof_tuple> |
                         ( <fof_sequent> )

<fof_tuple>          ::= [ ] | [ <fof_tuple_list> ]

<fof_tuple_list>     ::= <fof_logic_formula> |
                         <fof_logic_formula> , <fof_tuple_list>

<cnf_formula>        ::= ( <disjunction> ) | <disjunction>

<disjunction>        ::= <literal> | <disjunction> vline <literal>

<literal>            ::= <atomic_formula> | ~ <atomic_formula> |
                         <fol_infix_unary>

<thf_conn_term>      ::= <thf_pair_connective> | <assoc_connective> |
                         <thf_unary_connective>

<fol_infix_unary>    ::= <term> <infix_inequality> <term>

<thf_quantifier>     ::= <fol_quantifier> | ^ | ! arrow | ? star | @ plus | @ -

<thf_pair_connective> ::= <infix_equality> | <infix_inequality> |
                         <binary_connective>

<thf_unary_connective> ::= <unary_connective> | ! ! | ? ?

<subtype_sign>       ::= less_sign less_sign

<fol_quantifier>     ::= ! | ?

<binary_connective>  ::= less_eq_greater | => | less_eq | less_tilde_greater | ~vline | ~&

<assoc_connective>   ::= vline | &

<unary_connective>   ::= ~

<gentzen_arrow>      ::= - - arrow

<defined_type>       ::= <atomic_defined_word>

<atomic_formula>     ::= <plain_atomic_formula> | <defined_atomic_formula> |
                         <system_atomic_formula>

<plain_atomic_formula> ::= <plain_term>

<defined_atomic_formula> ::= <defined_plain_formula> | <defined_infix_formula>

<defined_plain_formula> ::= <defined_plain_term>

<defined_infix_formula>  ::= <term> <defined_infix_pred> <term>

<defined_infix_pred> ::= <infix_equality>

<infix_equality>     ::= =

<infix_inequality>   ::= !=

<system_atomic_formula> ::= <system_term>

<term>               ::= <function_term> | <variable> | <conditional_term> |
                         <let_term>

<function_term>      ::= <plain_term> | <defined_term> | <system_term>

<plain_term>         ::= <constant> | <functor> ( <arguments> )

<constant>           ::= <functor>

<functor>            ::= <atomic_word>

<defined_term>       ::= <defined_atom> | <defined_atomic_term>

<defined_atom>       ::= <number> | distinct_object

<defined_atomic_term> ::= <defined_plain_term>

<defined_plain_term> ::= <defined_constant> | <defined_functor> ( <arguments> )

<defined_constant>   ::= <defined_functor>

<defined_functor>    ::= <atomic_defined_word>

<system_term>        ::= <system_constant> | <system_functor> ( <arguments> )

<system_constant>    ::= <system_functor>

<system_functor>     ::= <atomic_system_word>

<variable>           ::= upper_word

<arguments>          ::= <term> | <term> , <arguments>

<conditional_term>   ::= $ite_t ( <tff_logic_formula> , <term> , <term> )

<let_term>           ::= $let_ft ( <tff_let_formula_defn> , <term> ) |
                         $let_tt ( <tff_let_term_defn> , <term> )

<source>             ::= <general_term>

<optional_info>      ::= , <useful_info> | <null>

<useful_info>        ::= <general_list>

<include>            ::= include ( <file_name><formula_selection> ) .

<formula_selection>  ::= , [ <name_list> ] | <null>

<name_list>          ::= <name> | <name> , <name_list>

<general_term>       ::= <general_data> | <general_data> : <general_term> |
                         <general_list>

<general_data>       ::= <atomic_word> | <general_function> |
                         <variable> | <number> | distinct_object |
                         <formula_data>

<general_function>   ::= <atomic_word> ( <general_terms> )

<formula_data>       ::= $thf ( <thf_formula> ) | $tff ( <tff_formula> ) |
                         $fof ( <fof_formula> ) | $cnf ( <cnf_formula> ) |
                         $fot ( <term> )

<general_list>       ::= [ ] | [ <general_terms> ]

<general_terms>      ::= <general_term> | <general_term> , <general_terms>

<name>               ::= <atomic_word> | integer

<atomic_word>        ::= lower_word | single_quoted

<atomic_defined_word> ::= dollar_word

<atomic_system_word> ::= dollar_dollar_word

<number>             ::= integer | rational | real

<file_name>          ::= single_quoted

<null>               ::=
