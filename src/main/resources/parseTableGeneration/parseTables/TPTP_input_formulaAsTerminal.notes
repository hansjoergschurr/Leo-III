Z0 ->
   TPTP_input action_0
TPTP_input -> {TPTPEntry}
   annotated_formula action_1
  |include action_2
annotated_formula -> {TPTPEntry}
   thf_annotated action_3
thf_annotated -> {TPTPEntry}
   "thf" "(" name "," formula_role "," "thf_formula" annotations ")" "." action_4
name -> {StringEntry}
   atomic_word action_5
  |"integer" action_6
atomic_word ->
   "lower_word" action_7
  |"single_quoted" action_8
formula_role -> {StringEntry}
   "lower_word" action_9
annotations -> {AnnotationsEntry}
   "," source optional_info action_10
  |null action_11
source -> {GeneralTermEntry}
   general_term action_12
general_term -> {GeneralTermEntry}
   general_data action_13
  |general_data ":" general_term action_14
  |general_list action_15
general_data -> {GeneralDataEntry}
   atomic_word action_16
  |general_function action_17
  |variable action_18
  |number action_19
  |"distinct_object" action_20
  |formula_data action_21
general_function -> {GeneralDataEntry}
   atomic_word "(" general_terms ")" action_22
general_terms -> {GeneralTermsEntry}
   general_term action_23
  |general_term "," general_terms action_24
variable ->
   "upper_word" action_25
number -> {NumberEntry}
   "integer" action_26
  |"rational" action_27
  |"real" action_28
formula_data -> {GeneralDataEntry}
   "$thf" "(" "thf_formula" ")" action_29
  |"$fot" "(" "term" ")" action_30
general_list -> {GeneralTermsEntry}
   "[" "]" action_31
  |"[" general_terms "]" action_32
optional_info -> {GeneralTermsEntry}
   "," useful_info action_33
  |null action_34
useful_info -> {GeneralTermsEntry}
   general_list action_35
null ->
   "" action_36
include -> {TPTPEntry}
   "include" "(" file_name formula_selection ")" "." action_37
file_name ->
   "single_quoted" action_38
formula_selection -> {StringsEntry}
   "," "[" name_list "]" action_39
  |null action_40
name_list -> {StringsEntry}
   name action_41
  |name "," name_list action_42

sealed class StackEntry
case class TPTPEntry(data: Either[AnnotatedFormula, Include]) extends StackEntry
case class FormulaEntry(data: thf.Formula) extends StackEntry
case class AnnotationsEntry(data: Annotations) extends StackEntry
case class GeneralTermEntry(data: GeneralTerm) extends StackEntry
case class GeneralTermsEntry(data: List[GeneralTerm]) extends StackEntry
case class GeneralDataEntry(data: GeneralData) extends StackEntry
case class NumberEntry(data: Number) extends StackEntry

case class TermEntry(data: Commons.Term) extends StackEntry
case class TokenEntry(data: Token) extends StackEntry
case class StringEntry(data: Either[AnnotatedFormula, Include]) extends StackEntry


  // Files
  sealed case class TPTPInput(inputs: Seq[Either[AnnotatedFormula, Include]]) {
    def getIncludes:Seq[Include] = inputs.filter(x => x.isRight).map(_.right.get)
    def getIncludeCount: Int = getIncludes.size
    def getFormulae:Seq[AnnotatedFormula] = inputs.filter(x => x.isLeft).map(_.left.get)
    def getFormulaeCount: Int = getFormulae.size
  }

  // Formula records
  sealed abstract class AnnotatedFormula(val name: Name, val role: Role,val annotations: Annotations) {
    type FormulaType
    def f: FormulaType

    lazy val rep = "(" + name + "," + role + "," + "(" + f.toString + ")" + annoToString(annotations) + ")."
  }
  case class TPIAnnotated(override val name: Name,override val role: Role,formula: fof.Formula,override val annotations: Annotations) extends AnnotatedFormula(name, role, annotations) {
    override type FormulaType = fof.Formula
    override def f = formula

    override def toString = "tpi" + rep
  }
  case class THFAnnotated(override val name: Name, override val role: Role, formula: thf.Formula,override val annotations: Annotations) extends AnnotatedFormula(name, role, annotations) {
    override type FormulaType = thf.Formula
    override def f = formula

    override def toString = "thf" + rep
  }
  case class TFFAnnotated(override val name: Name, override val role: Role, formula: tff.Formula, override val annotations: Annotations) extends AnnotatedFormula(name, role, annotations) {
    override type FormulaType = tff.Formula
    override def f = formula

    override def toString = "tff" + rep
  }
  case class FOFAnnotated(override val name: Name, override val role: Role, formula: fof.Formula, override val annotations: Annotations) extends AnnotatedFormula(name, role, annotations) {
    override type FormulaType = fof.Formula
    override def f = formula

    override def toString = "fof" + rep
  }
  case class CNFAnnotated(override val name: Name, override val role: Role, formula: cnf.Formula,override val annotations: Annotations) extends AnnotatedFormula(name, role, annotations) {
    override type FormulaType = cnf.Formula
    override def f = formula

    override def toString = "cnf" + rep
  }

  type Annotations = Option[(Source, List[GeneralTerm])]
  type Role = String

	...

  type Variable = String

  // System terms

  // General purpose things
  type Source = GeneralTerm

  // Include directives
  type Include = (String, List[Name])

  // Non-logical data (GeneralTerm, General data)
  sealed case class GeneralTerm(term: List[Either[GeneralData, List[GeneralTerm]]]) {
    override def toString = term.map(gt2String).mkString(":")

    def gt2String(in: Either[GeneralData, List[GeneralTerm]]): String = in match {
      case Left(data) => data.toString
      case Right(termList) => "[" + termList.mkString(",") +"]"
    }

  }

  sealed abstract class GeneralData
  case class GWord(gWord: String) extends GeneralData {
    override def toString = gWord
  }
  case class GFunc(name: String, args: List[GeneralTerm]) extends GeneralData {
    override def toString = funcToString(name, args)
  }
  case class GVar(gVar: Variable) extends GeneralData {
    override def toString = gVar.toString
  }
  case class GNumber(gNumber: Number) extends GeneralData {
    override def toString = gNumber.toString
  }
  case class GDistinct(data: String) extends GeneralData {
    override def toString = data
  }
  case class GFormulaData(data: FormulaData) extends GeneralData {
    override def toString = data.toString
  }

  sealed abstract class FormulaData
  case class THFData(formula: thf.Formula) extends FormulaData {
    override def toString = "$thf(" + formula.toString + ")"
  }
  case class TFFData(formula: tff.Formula) extends FormulaData {
    override def toString = "$tff(" + formula.toString + ")"
  }
  case class FOFData(formula: fof.Formula) extends FormulaData {
    override def toString = "$fof(" + formula.toString + ")"
  }
  case class CNFData(formula: cnf.Formula) extends FormulaData {
    override def toString = "$cnf(" + formula.toString + ")"
  }
  case class FOTData(term: Term) extends FormulaData {
    override def toString = "$fot(" + term.toString + ")"
  }

  // General purpose
  type Name = String


  ///////// String representation functions ///////////
  def funcToString(name:String, args: List[Any]) = args match {
    case List()     => name
    case _          => name + "(" + args.mkString(",") + ")"
  }

  def annoToString(anno: Option[(Source, List[GeneralTerm])]) = anno match {
    case None => ""
    case Some((src, termList)) => "," + src.toString + ",[" + termList.mkString(",") + "]"
  }

  def typedVarToString(input: (Variable,Option[Any])) = input match {
    case (v, None) => v.toString
    case (v, Some(typ)) => v.toString + " : " + typ.toString
  }
