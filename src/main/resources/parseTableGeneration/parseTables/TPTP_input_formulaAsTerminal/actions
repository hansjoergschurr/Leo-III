action_4 { TokenEntry(Dot) :: TokenEntry(RightParenthesis) :: AnnotationsEntry(annotations) :: FormulaEntry(f) :: TokenEntry(Comma) :: StringEntry(role) :: TokenEntry(Comma) :: StringEntry(name) :: TokenEntry(LeftParenthesis) :: TokenEntry(THF) :: rest => TPTPEntry(Left(THFAnnotated(name, role, f, annotations))) :: rest } 
	 thf_annotated -> "thf" "(" name "," formula_role "," "thf_formula" annotations ")" "."
action_5 { TokenEntry(tok: LowerWord | SingleQuoted) :: rest => StringEntry(tok.data) :: rest } 
	 name -> atomic_word
action_6 { TokenEntry(Integer(x)) :: rest => StringEntry(x.toString) :: rest } 
	 name -> "integer"
action_9 { TokenEntry(t: LowerWord) :: rest => StringEntry(t.data) :: rest } 
	 formula_role -> "lower_word"
action_10 { GeneralTermsEntry(optInfo) :: GeneralTermEntry(source) :: TokenEntry(Comma) :: rest => AnnotationsEntry(Some((source,optInfo))) :: rest } 
	 annotations -> "," source optional_info
action_11 { rest => AnnotationsEntry(None) :: rest } 
	 annotations -> null
action_13 { GeneralDataEntry(data) :: rest => GeneralTermEntry(GeneralTerm(List(Left(data)))) :: rest } 
	 general_term -> general_data
action_14 { GeneralTermEntry(gterm) :: TokenEntry(Colon) :: GeneralDataEntry(data) :: rest => GeneralTermEntry(GeneralTerm(Left(data) :: gterm.term)) :: rest } 
	 general_term -> general_data ":" general_term
action_15 { GeneralTermsEntry(terms) :: rest => GeneralTermEntry(GeneralTerm(List(Right(terms)))) :: rest } 
	 general_term -> general_list
action_16 { TokenEntry(x: LowerWord|SingleQuoted) :: rest => GeneralDataEntry(GWord(x.data)) :: rest } 
	 general_data -> atomic_word
action_18 { TokenEntry(UpperWord(x)) :: rest => GeneralDataEntry(GVar(x)) :: rest } 
	 general_data -> variable
action_19 { NumberEntry(x) :: rest => GeneralDataEntry(GNumber(x)) :: rest } 
	 general_data -> number
action_20 { TokenEntry(DistinctObject(x)) :: rest => GeneralDataEntry(GDistinct(x)) :: rest } 
	 general_data -> "distinct_object"
action_22 { TokenEntry(RightBracket) :: GeneralTermsEntry(terms) :: TokenEntry(LeftBracket) :: TokenEntry((LowerWord|SingleQuoted)(name)) :: rest => GeneralDataEntry(GFunc(name, terms)) :: rest } 
	 general_function -> atomic_word "(" general_terms ")"
action_23 { GeneralTermEntry(term) :: rest => GeneralTermsEntry(List(term)) :: rest } 
	 general_terms -> general_term
action_24 { GeneralTermsEntry(terms) :: TokenEntry(Comma) :: GeneralTermEntry(term) :: rest => GeneralTermsEntry(term :: terms) :: rest } 
	 general_terms -> general_term "," general_terms
action_26 { TokenEntry(x: Integer) :: rest => NumberEntry(IntegerNumber(x.value)) :: rest } 
	 number -> "integer"
action_27 { TokenEntry(Rational(p,q)) :: rest => NumberEntry(RationalNumber(p,q)) :: rest } 
	 number -> "rational"
action_28 { TokenEntry(Real(coeff,exp)) :: rest => NumberEntry(DoubleNumber(coeff * Math.pow(10,exp))) :: rest } 
	 number -> "real"
action_29 { TokenEntry(RightParenthesis) :: FormulaEntry(f) :: TokenEntry(LeftParenthesis) :: TokenEntry(DollarWord("$thf")) :: rest => GeneralDataEntry(GFormulaData(THFData(f))) :: rest } 
	 formula_data -> "$thf" "(" "thf_formula" ")"
action_30 { TokenEntry(RightParenthesis) :: TermEntry(t) :: TokenEntry(LeftParenthesis) :: TokenEntry(DollarWord("$fot")) :: rest => GeneralDataEntry(GFormulaData(FOTData(t))) :: rest } 
	 formula_data -> "$fot" "(" "term" ")"
action_31 { TokenEntry(RightBracket) :: TokenEntry(LeftBracket) :: rest => GeneralTermsEntry(List.empty) :: rest } 
	 general_list -> "[" "]"
action_32 { TokenEntry(RightBracket) :: GeneralTermsEntry(terms) :: TokenEntry(LeftBracket) :: rest => GeneralTermsEntry(terms) :: rest } 
	 general_list -> "[" general_terms "]"
action_33 { (x: GeneralTermsEntry) :: TokenEntry(Comma) :: rest => x :: rest } 
	 optional_info -> "," useful_info
action_34 { rest => GeneralTermsEntry(List.empty) :: rest } 
	 optional_info -> null
action_37 { TokenEntry(Dot) :: TokenEntry(RightParenthesis) :: StringsEntry(formulaSelections) :: TokenEntry(SingleQuoted(fileName)) :: TokenEntry(LeftParenthesis) :: TokenEntry(IncludeToken) :: rest => TPTPEntry(Right((fileName, formulaSelections))) :: rest } 
	 include -> "include" "(" file_name formula_selection ")" "."
action_39 { TokenEntry(RightBracket) :: (names: StringsEntry) :: TokenEntry(LeftBracket) :: TokenEntry(Comma) :: rest => names :: rest } 
	 formula_selection -> "," "[" name_list "]"
action_40 { rest => StringsEntry(List.empty) :: rest } 
	 formula_selection -> null
action_41 { StringEntry(str) :: rest => StringsEntry(List(str)) :: rest } 
	 name_list -> name
action_42 { StringsEntry(strRest) :: TokenEntry(Comma) :: StringEntry(str) :: rest => StringsEntry(str :: strRest) :: rest } 
	 name_list -> name "," name_list
