Z0 ->
   term action_0
term ->
   function_term action_1
  |variable action_2 { TokenEntry(x: UpperWord) :: rest => TermEntry(Var(name = x.data)) :: rest }
function_term ->
   plain_term action_3
  |defined_term action_4
  |system_term action_5
plain_term ->
   constant action_6 { TokenEntry(x: LowerWord|SingleQuoted) :: rest => TermEntry(Func(x.data, List.empty)) :: rest }
  |functor "(" arguments ")" action_7 { TokenEntry(RightParenthesis) :: TermEntries(args) :: TokenEntry(LeftParenthesis) :: TokenEntry(x: LowerWord|SingleQuoted) :: rest => TermEntry(Func(x.data, args)) :: rest }
constant ->
   functor action_8
functor ->
   atomic_word action_9
atomic_word ->
   "lower_word" action_10
  |"single_quoted" action_11
arguments ->
   term action_12 { TermEntry(term) :: rest => TermEntries(List(term)) :: rest }
  |term "," arguments action_13 { TermEntries(arguments) :: TokenEntry(Comma) :: TermEntry(term) :: rest => TermEntries(term :: arguments) :: rest }
defined_term ->
   defined_atom action_14
  |defined_atomic_term action_15
defined_atom ->
   number action_16 { NumberEntry(x) :: rest => TermEntry(NumberTerm(x)) :: rest }
  |"distinct_object" action_17 { TokenEntry(x: DistinctObject) :: rest => TermEntry(Distinct(x.chars)) :: rest }
number ->
   "integer" action_18 { TokenEntry(x: Integer) :: rest => NumberEntry(IntegerNumber(x.value)) :: rest }
  |"rational" action_19 { TokenEntry(x: Rational) :: rest => NumberEntry(RationalNumber(x.p, x.q)) :: rest }
  |"real" action_20 { TokenEntry(x: Real) :: rest => NumberEntry(DoubleNumber(x.coeff * Math.pow(10, x.exp))) :: rest }
defined_atomic_term ->
   defined_plain_term action_21
defined_plain_term ->
   defined_constant action_22 { TokenEntry(x: DollarWord) :: rest => TermEntry(DefinedFunc(x.data, List[Term]())) :: rest }
  |defined_functor "(" arguments ")" action_23 { TokenEntry(RightParenthesis) :: TermEntries(args) :: TokenEntry(LeftParenthesis) :: TokenEntry(x: DollarWord) :: rest => TermEntry(DefinedFunc(x.data, args)) :: rest }
defined_constant ->
   defined_functor action_24
defined_functor ->
   atomic_defined_word action_25
atomic_defined_word ->
   "dollar_word" action_26
system_term ->
   system_constant action_27 { TokenEntry(x: DollarDollarWord) :: rest => TermEntry(SystemFunc(x.data, List[Term]())) :: rest }
  |system_functor "(" arguments ")" action_28 { TokenEntry(RightParenthesis) :: TermEntries(args) :: TokenEntry(LeftParenthesis) :: TokenEntry(x: DollarDollarWord) :: rest => TermEntry(SystemFunc(x.data, args)) :: rest }
system_constant ->
   system_functor action_29
system_functor ->
   atomic_system_word action_30
atomic_system_word ->
   "dollar_dollar_word" action_31
variable ->
   "upper_word" action_32

