package leo.datastructures

import scala.language.implicitConversions

/**
 * Abstract interface for terms and operations on them that can be
 * done in the internal language.
 * Terms are generated by
 *
 * {{{s,t ::= i (bound symbol)
 *       | c (constant symbol)
 *       | λ:tau.s (term abstraction)
 *       | s t (term application)
 *       | Λs (type abstraction)
 *       | s tau (type application)}}}
 *
 * where `c` is some symbol (constant) and `tau` is a type (see `Type`).
 *
 * @author Alexander Steen
 * @since 21.05.2014
 * @note Updated 02.06.2014 Cleaned up method set, lambda terms always have types
 * @note Updated 09.06.2014 Added pattern matcher for terms, added definition expansion
 */
trait Term extends Pretty with Prettier {
  // Predicates on terms
  /** Returns true iff `this` is either a constant or a variable, i.e. `isConstant || isVariable`. */
  def isAtom: Boolean
  def isConstant: Boolean
  def isVariable: Boolean
  def isTermAbs: Boolean
  def isTypeAbs: Boolean
  def isApp: Boolean
  def flexHead: Boolean

  // Locality/Indexing properties of terms, TODO: Obsolete, what to do with it?
  def indexing: Indexing = if (isIndexed) INDEXED else PLAIN
  def isIndexed: Boolean = TermIndex.contains(this)
  def locality: Locality
  def isLocal: Boolean
  def isGlobal: Boolean = !isLocal

  //////////////////////////
  // Handling def. expansion
  //////////////////////////

  /** Returns true iff any subterm of this term can be expanded by its definition. */
  def δ_expandable(implicit sig: Signature): Boolean
  /** Exhaustively expands all defined subterms (i.e. defined symbols) by its definitions.
    * This may not terminate for recursively defined symbols. */
  def δ_expand(implicit sig: Signature): Term
  /** Expands defined subterms as `δ_expand` but with at most `rep` recursive replacements. */
  def δ_expand(rep: Int)(implicit sig: Signature): Term
  /** Exhaustively expands all symbols except for those in `symbs` which are
    * defined by its definitions.
    * This may not terminate for recursively defined symbols. */
  def δ_expand_upTo(symbs: Set[Signature#Key])(implicit sig: Signature): Term

  //////////////////////////
  // Queries on terms
  //////////////////////////
  /** Returns the type of the term */
  def ty: Type
  /** true iff the term does not contain any free variables. */
  final def ground: Boolean = freeVars.isEmpty

  // TODO: REMOVE OLD FUNCTIONS SUCH AS
  def freeVars: Set[Term] // TODO: Clarify that this does ...
  def boundVars: Set[Term]
  def looseBounds: Set[Int]  // TODO ..as opposed to this
  // TODO END

  def fv: Set[(Int, Type)]
  def tyFV: Set[Int]
  def occurrences: Map[Term, Set[Position]]
  def feasibleOccurences: Map[Term, Set[Position]]
  def headSymbol: Term
  def headSymbolDepth: Int
  def size: Int

  def symbols: Set[Signature#Key]
  final def symbolsOfType(ty: Type)(implicit sig: Signature) = {
    symbols.filter({i => sig(i)._ty == ty})
  }
  // Functions for FV-Indexing
  def fvi_symbolFreqOf(symbol: Signature#Key): Int
  def fvi_symbolDepthOf(symbol: Signature#Key): Int

  // Substitutions and replacements
  /** Replace every occurrence of `what` in `this` by `by`. */
  def replace(what: Term, by: Term): Term
  def replaceAt(at: Position, by: Term): Term

  /** Apply substitution `subst` to underlying term.
    * I.e. each free variable `i` (NOT meta-vars!) occurring within `this` is replaced by `subst(i)`,
    * The term is then beta normalized */
  def substitute(termSubst: Subst, typeSubst: Subst = Subst.id): Term = closure(termSubst, typeSubst).betaNormalize
//  /** Apply type substitution `tySubst` to underlying term. */
//  def tySubstitute(tySubst: Subst): Term = this.tyClosure(tySubst).betaNormalize

  /** Explicitly create a closure, i.e. a postponed (simultaneous) substitution (of types and terms) */
  def closure(termSubst: Subst, typeSubst: Subst): Term
  /** Explicitly create a term closure, i.e. a postponed substitution */
  def termClosure(subst: Subst): Term
  /** Explicitly create a term closure with underlying type substitution `tySubst`. */
  def typeClosure(subst: Subst): Term

  // Other operations
  def compareTo(that: Term)(implicit sig: Signature): CMP_Result = leo.Configuration.TERM_ORDERING.compare(this, that)(sig)
  /** Return the β-nf of the term */
  def betaNormalize: Term
  /** Return the eta-long-nf of the term */
  def etaExpand: Term
  /** Eta-contract term on root level if possible */
  def topEtaContract: Term

  /// Hidden definitions
  protected[datastructures] def normalize(termSubst: Subst, typeSubst: Subst): Term
}



/////////////////////////////
// Companion factory object
/////////////////////////////


/**
 * Term Factory object. Only this class is used to create new terms.
 *
 * Current default term implementation: [[impl.TermImpl]]
 */
object Term extends TermBank {
  import impl.TermImpl

  // Factory method delegation
  final def mkAtom(id: Signature#Key)(implicit sig: Signature): Term = TermImpl.mkAtom(id)(sig)
  final def mkAtom(id: Signature#Key, ty: Type): Term = TermImpl.mkAtom(id,ty)
  final def mkBound(t: Type, scope: Int): Term = TermImpl.mkBound(t,scope)
  final def mkTermApp(func: Term, arg: Term): Term = TermImpl.mkTermApp(func, arg)
  final def mkTermApp(func: Term, args: Seq[Term]): Term = TermImpl.mkTermApp(func, args)
  final def mkTermAbs(t: Type, body: Term): Term = TermImpl.mkTermAbs(t, body)
  final def mkTypeApp(func: Term, arg: Type): Term = TermImpl.mkTypeApp(func, arg)
  final def mkTypeApp(func: Term, args: Seq[Type]): Term = TermImpl.mkTypeApp(func, args)
  final def mkTypeAbs(body: Term): Term = TermImpl.mkTypeAbs(body)
  final def mkApp(func: Term, args: Seq[Either[Term, Type]]): Term = TermImpl.mkApp(func, args)

  // Term bank method delegation
  final val local = TermImpl.local
  final def insert(term: Term): Term = TermImpl.insert(term)
  final def contains(term: Term): Boolean = TermImpl.contains(term)
  final def reset(): Unit = TermImpl.reset()

  // Utility
  /** Checks if a term is well-typed. Does does check whether free variables
    * are consistently typed. */
  final def wellTyped(t: Term): Boolean = TermImpl.wellTyped(t.asInstanceOf[TermImpl])

  // Conversions
  /** Convert tuple (i,ty) to according de-Bruijn index */
  final implicit def intToBoundVar(in: (Int, Type)): Term = mkBound(in._2,in._1)
  /** Convert tuple (i,j) to according de-Bruijn index (where j is a type-de-Bruijn index) */
  final implicit def intsToBoundVar(in: (Int, Int)): Term = mkBound(in._2,in._1)


  // Legacy functions type types for statistics, like to be reused sometime
  type TermBankStatistics = (Int, Int, Int, Int, Int, Int, Map[Int, Int])
  final def statistics: TermBankStatistics = TermImpl.statistics


  //////////////////////////////////////////
  // Patterns for term structural matching
  //////////////////////////////////////////
  /**
   * Pattern for matching bound symbols in terms (i.e. De-Bruijn-Indices). Usage:
   * {{{
   * t match {
   *  case Bound(ty,scope) => println("Matched bound symbol of lambda-scope "
   *                                  + scope.toString + " with type "+ ty.pretty)
   *  case _               => println("something else")
   * }
   * }}}
   */
  object Bound { def unapply(t: Term): Option[(Type, Int)] = TermImpl.boundMatcher(t) }

  /**
   * Pattern for matching constant symbols in terms (i.e. symbols in signature). Usage:
   * {{{
   * t match {
   *  case Symbol(constantKey) => println("Matched constant symbol "+ constantKey.toString)
   *  case _                   => println("something else")
   * }
   * }}}
   */
  object Symbol { def unapply(t: Term): Option[Signature#Key] = TermImpl.symbolMatcher(t) }

  /**
   * Pattern for matching a general application (i.e. terms of form `(h ∙ S)`), where
   * `h` is the function term and `S` is a sequence of terms/types (arguments).
   * Usage:
   * {{{
   * t match {
   *  case s ∙ args => println("Matched application. Head: " + s.pretty
   *                                            + " Args: " + args.map.fold(_.pretty,_.pretty)).toString
   *  case _       => println("something else")
   * }
   * }}}
   */
  object ∙ { def unapply(t: Term): Option[(Term, Seq[Either[Term, Type]])] = TermImpl.appMatcher(t) }

  /**
   * Pattern for matching a term application (i.e. terms of form `(h ∙ S)`), where
   * `h` is the function term and `S` is a sequence of terms only (arguments).
   * Usage:
   * {{{
   * t match {
   *  case s ∙ args => println("Matched application. Head: " + s.pretty
   *                                            + " Args: " + args.map.fold(_.pretty,_.pretty)).toString
   *  case _       => println("something else")
   * }
   * }}}
   */
  object TermApp {
    def unapply(t: Term): Option[(Term, Seq[Term])] = t match {
      case h ∙ sp => if (sp.forall(_.isLeft)) {
                        Some(h, sp.map(_.left.get))
                      } else {
                        None
                      }
      case _ => None
    }
  }

  /**
   * Pattern for matching a type application (i.e. terms of form `(h ∙ S)`), where
   * `h` is the function term and `S` is a sequence of types only (arguments).
   * Usage:
   * {{{
   * t match {
   *  case s ∙ args => println("Matched application. Head: " + s.pretty
   *                                            + " Args: " + args.map.fold(_.pretty,_.pretty)).toString
   *  case _       => println("something else")
   * }
   * }}}
   */
  object TypeApp {
    def unapply(t: Term): Option[(Term, Seq[Type])] = t match {
      case h ∙ sp => if (sp.forall(_.isRight)) {
        Some(h, sp.map(_.right.get))
      } else {
        None
      }
      case _ => None
    }
  }

  /**
   * Pattern for matching (term) abstractions in terms (i.e. terms of form `(\(ty)(s))` where `ty` is a type). Usage:
   * {{{
   * t match {
   *  case ty :::> s => println("Matched abstraction. Type of parameter: " + ty.pretty
   *                                                           + " Body: " + s.pretty)
   *  case _         => println("something else")
   * }
   * }}}
   */
  object :::> { def unapply(t: Term): Option[(Type,Term)] = TermImpl.termAbstrMatcher(t) }

  /**
   * Pattern for matching (type) abstractions in terms (i.e. terms of form `/\(s)`). Usage:
   * {{{
   * t match {
   *  case TypeLambda(s) => println("Matched type abstraction. Body: " + s.pretty)
   *  case _             => println("something else")
   * }
   * }}}
   */
  object TypeLambda { def unapply(t: Term): Option[Term] = TermImpl.typeAbstrMatcher(t) }
}
